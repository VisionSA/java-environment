<?xml version="1.0"?>

<config>
  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========             L O G G I N G                         ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
   WebORB logging policies and categories. Logging policies control how log events
   are displayed or persisted. Logging categories control which events are enabled
   To disable a category, change the 'enabled' attribute value to "no"
  ==================================================================================== -->
  <!-- enter the name of the logging policy. the name must match the value from the
  <policyName> element from one of the logging policies listed below -->
  <currentPolicy>Terminal</currentPolicy>

  <!-- terminal logging policy - all log events are displayed in the terminal window -->
  <loggingPolicy>
    <policyName>Terminal</policyName>
    <className>weborb.util.log.policies.TerminalPolicy</className>
  </loggingPolicy>

  <!-- File Size Threshold policy - All log events are saved in a file. As soon as the
  file reaches the size specified in the <value> element of the fileSize parameter, the
  policy rolls logging over to a new file -->
  <loggingPolicy>
    <policyName>File Size Threshold</policyName>
    <className>weborb.util.log.policies.SizeThresholdPolicy</className>
    <!-- the fileSize parameter specifies the size of the file in KB before a new file is created -->
    <parameter>
      <name>fileSize</name>
      <value>1024</value>
    </parameter>
    <!-- the fileName parameter specifies the prefix of the log file name.
    WebORB adds sequential numbers at the end of the prefix  -->
    <parameter>
      <name>fileName</name>
      <value>webORB_log</value>
    </parameter>
  </loggingPolicy>


  <!-- Date based logging - All log events are saved in a file corresponding to the
  date when the events occured. When the product is restarted, the same log file is used
  to store the log events. If the date changes while the product is running, log events
  issued on the new date are saved in a new file -->
  <loggingPolicy>
    <policyName>Date Based Logging</policyName>
    <className>weborb.util.log.policies.DatePolicy</className>
  </loggingPolicy>

  <loggingPolicy>
    <policyName>Specific File</policyName>
    <className>weborb.util.log.policies.SpecificFilePolicy</className>
    <parameter>
      <name>fileName</name>
      <value>webORB1_log.txt</value>
    </parameter>
  </loggingPolicy>

  <log enable="yes">WEBORB INFO</log>
  <log enable="no">WEBORB DEBUG</log>
  <log enable="yes">WEBORB ERROR</log>
  <log enable="no">WEBORB SERIALIZATION</log>
  <log enable="yes">WEBORB EXCEPTION</log>
  <log enable="yes">WEBORB INSTRUMENTATION</log>
  <log enable="no">WEBORB SECURITY</log>
  <log enable="no">WEBORB MESSAGE SERVER</log>

  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========               P R O T O C O L S                   ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  WebORB is a multi-protocol presentation server. The same server instance can process
  requests in different formats. Protocol parsers can be plugged in using the protocolHandler
  element below. Protocol handlers must implement the weborb.protocols.IMessageFactory
  interface. Interface implementations must have default no-arg constructor.
  ==================================================================================== -->
  <!-- WOLF protocol handler -->
  <protocolHandler>weborb.protocols.wolf.RequestParser</protocolHandler>

  <!-- AMF/ Flash Remoting protocol handler -->
  <protocolHandler>weborb.protocols.amf.RequestParser</protocolHandler>


  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========      C L I E N T   C L A S S   M A P P I N G      ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  To simplify the translation between client and server-side data classes, WebORB provides a
  class mapping facility. Using the format below you can specify names of the data classes
  used on the client side and map them to the corresponding classes on the server side. These
  mappings take effect under the following conditions:
  1. When a client sends an object of a particular class as an argument to a method call
     and the server-side method's formal argument is an interface, an abstract class or
     a generic base class. In these cases, the server-side class must be either an
     implementation of the interface or a assignable from the specified abstract or base class.
     These mappings take the precedence over the "abstractClassMappings" configuration.
  2. When a server as a result of a method invocation returns an object of a class that has
     a mapping below, WebORB will format response such that the client-side system
     understands which client-side class should be used
  ==================================================================================== -->
  <classMappings>
    <classMapping>
        <clientClass>ArgumentMetadata</clientClass>
        <serverClass>weborb.inspection.ArgumentDescriptor</serverClass>
    </classMapping>

    <classMapping>
        <clientClass>Weborb.Management.Configuration.AbstractClassMapping.AbstractClassMappingItem</clientClass>
        <serverClass>weborb.management.configuration.abstractclassmapping.AbstractClassMappingItem</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ManagementService</clientClass>
        <serverClass>weborb.management.ManagementService</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.Configuration.ClassMapping.ClassMappingItem</clientClass>
        <serverClass>weborb.management.configuration.classmapping.ClassMappingItem</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.Configuration.CustomSerializers.CustomSerializer</clientClass>
        <serverClass>weborb.management.configuration.customserializers.CustomSerializer</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.Configuration.Logging.LoggingCategory</clientClass>
        <serverClass>weborb.management.configuration.logging.LoggingCategory</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.Configuration.ServiceAliasing.ServiceAlias</clientClass>
        <serverClass>weborb.management.configuration.servicealiasing.ServiceAlias</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.Configuration.ServiceFactories.ServiceFactory</clientClass>
        <serverClass>weborb.management.configuration.servicefactories.ServiceFactory</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.Configuration.Destinations.ServiceDestination</clientClass>
        <serverClass>weborb.management.configuration.destinations.ServiceDestination</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Data.Inspector.ColumnDataTypeInfo</clientClass>
        <serverClass>weborb.data.inspector.ColumnDataTypeInfo</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Data.Inspector.ColumnInfo</clientClass>
        <serverClass>weborb.data.inspector.ColumnInfo</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.DataManagement.DatabaseConnectionInfo</clientClass>
        <serverClass>weborb.management.datamanagement.DatabaseConnectionInfo</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Data.Inspector.ForeignKeyData</clientClass>
        <serverClass>weborb.data.inspector.ForeignKeyData</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Data.Inspector.RelationColumnInfo</clientClass>
        <serverClass>weborb.data.inspector.RelationColumnInfo</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Data.Inspector.RelationInfo</clientClass>
        <serverClass>weborb.data.inspector.RelationInfo</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Data.Management.QueryResult</clientClass>
        <serverClass>weborb.data.management.QueryResult</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.DataManagement.ServerCodeLanguage</clientClass>
        <serverClass>weborb.management.datamanagement.ServerCodeLanguage</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.DataManagement.ServerConnectionInfo</clientClass>
        <serverClass>weborb.management.datamanagement.ServerConnectionInfo</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.DataManagement.ServerType</clientClass>
        <serverClass>weborb.management.datamanagement.ServerType</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.DataManagement.UserTableInfo</clientClass>
        <serverClass>weborb.management.datamanagement.UserTableInfo</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.DataManagement.TableMeta</clientClass>
        <serverClass>weborb.management.datamanagement.TableMeta</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.DataManagement.UserClassFieldInfo</clientClass>
        <serverClass>weborb.management.datamanagement.UserClassFieldInfo</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.DataManagement.UserClassInfo</clientClass>
        <serverClass>weborb.management.datamanagement.UserClassInfo</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.DataManagement.UserDataModel</clientClass>
        <serverClass>weborb.management.datamanagement.UserDataModel</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.DataManagement.UserRelationInfo</clientClass>
        <serverClass>weborb.management.datamanagement.UserRelationInfo</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.DataManagement.UserSettings</clientClass>
        <serverClass>weborb.management.datamanagement.UserSettings</serverClass>
    </classMapping>
      <classMapping>
        <clientClass>Weborb.Management.DataManagement.Codegen.AppHandler</clientClass>
        <serverClass>weborb.management.datamanagement.codegen.AppHandler</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Util.Codegen.CodeDirectory</clientClass>
        <serverClass>weborb.util.codegen.CodeDirectory</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Util.Codegen.CodeFile</clientClass>
        <serverClass>weborb.util.codegen.CodeFile</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Util.Codegen.CodegeneratorResult</clientClass>
        <serverClass>weborb.util.codegen.CodegeneratorResult</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Util.Codegen.CodeItem</clientClass>
        <serverClass>weborb.util.codegen.CodeItem</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.Service</clientClass>
        <serverClass>weborb.management.servicebrowser.Service</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.ServicePackage</clientClass>
        <serverClass>weborb.management.servicebrowser.ServicePackage</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.ServiceConstraint</clientClass>
        <serverClass>weborb.management.servicebrowser.ServiceConstraint</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.ServiceDataType</clientClass>
        <serverClass>weborb.management.servicebrowser.ServiceDataType</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.ServiceDataTypeContainer</clientClass>
        <serverClass>weborb.management.servicebrowser.ServiceDataTypeContainer</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.ServiceDataTypeField</clientClass>
        <serverClass>weborb.management.servicebrowser.ServiceDataTypeField</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.ServiceHostRestriction</clientClass>
        <serverClass>weborb.management.servicebrowser.ServiceHostRestriction</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.ServiceIPRangeRestriction</clientClass>
        <serverClass>weborb.management.servicebrowser.ServiceIPRangeRestriction</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.ServiceIPRestriction</clientClass>
        <serverClass>weborb.management.servicebrowser.ServiceIPRestriction</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.ServiceMethod</clientClass>
        <serverClass>weborb.management.servicebrowser.ServiceMethod</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.ServiceMethodArg</clientClass>
        <serverClass>weborb.management.servicebrowser.ServiceMethodArg</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.ServiceNamespace</clientClass>
        <serverClass>weborb.management.servicebrowser.ServiceNamespace</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.ServiceNode</clientClass>
        <serverClass>weborb.management.servicebrowser.ServiceNode</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.ServiceRestriction</clientClass>
        <serverClass>weborb.management.servicebrowser.ServiceRestriction</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.ServiceRestrictionType</clientClass>
        <serverClass>weborb.management.servicebrowser.ServiceRestrictionType</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.ServiceRoleRestriction</clientClass>
        <serverClass>weborb.management.servicebrowser.ServiceRoleRestriction</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Management.ServiceBrowser.ServiceSecurityNode</clientClass>
        <serverClass>weborb.management.servicebrowser.ServiceSecurityNode</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>FunctionMetadata</clientClass>
        <serverClass>weborb.inspection.MethodDescriptor</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>ServiceMetadata</clientClass>
        <serverClass>weborb.inspection.ServiceDescriptor</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>RecordSet</clientClass>
        <serverClass>weborb.types.jdbc.RecordSetInfo</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>flex.messaging.messages.AsyncMessage</clientClass>
        <serverClass>weborb.v3types.AsyncMessage</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>flex.messaging.messages.CommandMessage</clientClass>
        <serverClass>weborb.v3types.CommandMessage</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>flex.messaging.messages.RemotingMessage</clientClass>
        <serverClass>weborb.v3types.ReqMessage</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>flex.messaging.messages.AcknowledgeMessage</clientClass>
        <serverClass>weborb.v3types.AckMessage</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>flex.data.messages.DataMessage</clientClass>
        <serverClass>weborb.v3types.DataMessage</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>flex.data.messages.PagedMessage</clientClass>
        <serverClass>weborb.v3types.PagedMessage</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>flex.data.messages.SequencedMessage</clientClass>
        <serverClass>weborb.v3types.SeqMessage</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>flex.messaging.messages.ErrorMessage</clientClass>
        <serverClass>weborb.v3types.ErrMessage</serverClass>
    </classMapping>
    <classMapping>
      <clientClass>flex.messaging.messages.DataErrorMessage</clientClass>
      <serverClass>weborb.v3types.ErrDataMessage</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>flex.data.messages.UpdateCollectionMessage</clientClass>
        <serverClass>weborb.v3types.UpdateCollMessage</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>flex.data.UpdateCollectionRange</clientClass>
        <serverClass>weborb.v3types.UpdateCollRange</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Examples.PhoneBookRecord</clientClass>
        <serverClass>weborb.examples.PhoneBookRecord</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Examples.FileItem</clientClass>
        <serverClass>weborb.examples.FileItem</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Examples.FolderItem</clientClass>
        <serverClass>weborb.examples.FolderItem</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Examples.FileSystemItem</clientClass>
        <serverClass>weborb.examples.FileSystemItem</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Examples.InvocationTests.Parent</clientClass>
        <serverClass>weborb.examples.invocationtests.Parent</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Examples.InvocationTests.Child</clientClass>
        <serverClass>weborb.examples.invocationtests.Child</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Examples.InvocationTests.ComplexType</clientClass>
        <serverClass>weborb.examples.invocationtests.ComplexType</serverClass>
    </classMapping>
    <classMapping>
        <clientClass>Weborb.Examples.InvocationTests.Employee</clientClass>
        <serverClass>weborb.examples.invocationtests.Employee</serverClass>
    </classMapping>
  </classMappings>

  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========           N A M E D    S E R V I C E S            ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  Named services is a feature unique to WebORB. It provides functionality for hiding
  the name of the concrete class, web service or JNDI name from the flash client side.
  A class name is mapped to a logical name which is used in the NetConnection.getService call.
  To create a named service definition, create a <service> element. The <name> subelement
  contains the assigned logical name. The <serviceId> element contains the name of the class,
  web service WSDL URL, EJB JNDI location, etc.
  ==================================================================================== -->
  <services>
  <service>
        <name>weborbHttpHandler</name>
        <serviceId>weborb.ORBServlet</serviceId>
    </service>

    <service>
        <name>weborbInspector</name>
        <serviceId>weborb.dispatch.a</serviceId>
    </service>

    <service>
        <name>weborbInvoker</name>
        <serviceId>weborb.dispatch.b</serviceId>
    </service>

    <service>
        <name>weborbObjectHandler</name>
        <serviceId>weborb.handler.JavaObjectHandler</serviceId>
    </service>

    <service>
        <name>weborbWebServiceHandler</name>
        <serviceId>weborb.handler.AxisWebServiceHandler</serviceId>
    </service>

    <service>
        <name>serverInfo</name>
        <serviceId>weborb.console.serverinfo.ServerInfo</serviceId>
    </service>

    <service>
        <name>Administration</name>
        <serviceId>weborb.config.Administration</serviceId>
    </service>

    <service>
        <name>ORBSecurity</name>
        <serviceId>weborb.security.ORBSecurity</serviceId>
    </service>

    <service>
        <name>SingleIPRestriction</name>
        <serviceId>weborb.security.SingleIPRestriction</serviceId>
    </service>

    <service>
        <name>IPRangeRestriction</name>
        <serviceId>weborb.security.IPRangeRestriction</serviceId>
    </service>

    <service>
        <name>HostNameRestriction</name>
        <serviceId>weborb.security.HostNameRestriction</serviceId>
    </service>

    <service>
        <name>RoleNameRestriction</name>
        <serviceId>weborb.security.RoleNameRestriction</serviceId>
    </service>

    <!-- Examples  -->
    <service>
        <name>ExamplesActivationSession</name>
        <serviceId>weborb.examples.activation.ShoppingCart</serviceId>
    </service>

    <service>
        <name>ExamplesActivationApplication</name>
        <serviceId>weborb.examples.activation.UserPoll</serviceId>
    </service>

    <service>
        <name>ExamplesFactoriesService</name>
        <serviceId>weborb.examples.invocation.factories.Person</serviceId>
    </service>

    <service>
        <name>ExampleArgumentFactories</name>
        <serviceId>weborb.examples.invocation.factories.SampleArgumentFactoryService</serviceId>
    </service>

    <service>
        <name>ExamplesBroadcast</name>
        <serviceId>weborb.examples.messageserver.Broadcast</serviceId>
    </service>

    <service>
        <name>ExamplesUnicast</name>
        <serviceId>weborb.examples.messageserver.Unicast</serviceId>
    </service>

    <service>
        <name>Weborb.Management.LicenseService</name>
        <serviceId>weborb.management.LicenseService</serviceId>
    </service>
    <service>
        <name>Weborb.Management.ManagementService</name>
        <serviceId>weborb.management.ManagementService</serviceId>
    </service>
    <service>
        <name>Weborb.Management.DataManagement.DataManagementService</name>
        <serviceId>weborb.management.datamanagement.DataManagementService</serviceId>
    </service>
        <service>
        <name>Weborb.Management.DataManagement.Codegen.AppHandler</name>
        <serviceId>weborb.management.datamanagement.codegen.AppHandler</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.BasicService</name>
        <serviceId>weborb.examples.BasicService</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.IdentityService</name>
        <serviceId>weborb.examples.IdentityService</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.PhoneBook</name>
        <serviceId>weborb.examples.PhoneBook</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.FileSystemBrowser</name>
        <serviceId>weborb.examples.FileSystemBrowser</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.DataBinding</name>
        <serviceId>weborb.examples.DataBinding</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.ExceptionsTest</name>
        <serviceId>weborb.examples.ExceptionsTest</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.InvocationTests.PrimitiveArrayTest</name>
        <serviceId>weborb.examples.invocationtests.PrimitiveArrayTest</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.InvocationTests.ComplexTypesTest</name>
        <serviceId>weborb.examples.invocationtests.ComplexTypesTest</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.InvocationTests.CrossReferenceTest</name>
        <serviceId>weborb.examples.invocationtests.CrossReferenceTest</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.InvocationTests.DatabaseTest</name>
        <serviceId>weborb.examples.invocationtests.DatabaseTest</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.InvocationTests.MultipleArgsTest</name>
        <serviceId>weborb.examples.invocationtests.MultipleArgsTest</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.InvocationTests.PrimitiveTest</name>
        <serviceId>weborb.examples.invocationtests.PrimitiveTest</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.InvocationTests.StringsTest</name>
        <serviceId>weborb.examples.invocationtests.StringsTest</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.InvocationTests.CollectionsTest</name>
        <serviceId>weborb.examples.invocationtests.CollectionsTest</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.InvocationTests.CollectionsArrayTest</name>
        <serviceId>weborb.examples.invocationtests.CollectionsArrayTest</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.InvocationTests.ComplexTypeArrayTest</name>
        <serviceId>weborb.examples.invocationtests.ComplexTypeArrayTest</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.InvocationTests.StringsArrayTest</name>
        <serviceId>weborb.examples.invocationtests.StringsArrayTest</serviceId>
    </service>
    <service>
        <name>Weborb.Examples.InvocationTests.DatabaseTest</name>
        <serviceId>weborb.examples.invocationtests.DatabaseTest</serviceId>
    </service>
    <service>
        <name>weborb.examples.UserProfile</name>
        <serviceId>weborb.examples.UserProfile</serviceId>
    </service>
</services>
  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========       S E R V I C E    A C T I V A T O R S        ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  Service activator is responsible for creating or retrieving an instance of Java object
  accordingly to some policy. The object retrieved is used as a service for the remoting
  invocation. For example, Session activator retrieves service objects from the HTTP session
  associated with the client.
  To register an activator, create <activator> element. The <activationModeName> element
  must contain the name of the activation mode the activator will be responding to. The
  <className> element must contain the name of the activator class. The class must implement
  the weborb.activation.IActivator interface and must have default no argument constructor.
  ==================================================================================== -->
  <activator>
    <activationModeName>request</activationModeName>
    <className>weborb.activation.RequestActivator</className>
  </activator>

  <activator>
    <activationModeName>session</activationModeName>
    <className>weborb.activation.SessionActivator</className>
  </activator>

  <activator>
    <activationModeName>application</activationModeName>
    <className>weborb.activation.ApplicationActivator</className>
  </activator>

  <!-- if set to false will force an exception thrown to the client
       when a request with an expired session arrives. This is valid
       only for the services that use session activation. Otherwise,
       if the value is yes, a new session will be created for the request -->
  <reactivateExpiredSessions>yes</reactivateExpiredSessions>



  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========       S E R V I C E    I N S P E C T O R S        ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  Enter fully qualified inspector class name in the <serviceInspector> element.
  Create a separate element for each new service inspector. WebORB uses
  reflection to create instances of custom inspectors. Inspector class must
  have a default no-arg constructor and must implement the
  weborb.handler.IInspectionHandler interface
  ==================================================================================== -->
  <serviceInspector>weborb.handler.JavaObjectHandler</serviceInspector>
  <serviceInspector>weborb.handler.webservices.AxisWebServiceHandler</serviceInspector>
  <serviceInspector>weborb.handler.EjbHandler</serviceInspector>




  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========       S E R V I C E    I N V O K E R S            ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  Enter fully qualified invoker class names in the <serviceInvoker> element.
  Create new element for each invoker class. WebORB uses reflection to
  create instances of custom invokers. Invoker class must have default no-arg
  constructor and must implement the weborb.handler.IInvocationHandler
  interface
  ==================================================================================== -->
  <serviceInvoker>weborb.handler.JavaObjectHandler</serviceInvoker>
  <serviceInvoker>weborb.handler.SpringBeanHandler</serviceInvoker>
  <serviceInvoker>weborb.handler.webservices.AxisWebServiceHandler</serviceInvoker>
  <serviceInvoker>weborb.handler.EjbHandler</serviceInvoker>




  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========             W E B    S E R V I C E S              ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  Persistent web services store
  All web services handlers supported by WebORB out of the box, use a
  spectial directory to store WSDL document, and class files corresponding to
  XML complex types. These classes are required to perform method invocations.
  The 'persistentWebServicesStore' property designates a directory where web
  service related files are stored. By default the persistent store is
  'webservices'. If WebORB runs standalone (or from un-opened war), the
  webservices directory is created under system temporary directory, otherwise
  it is created under WEB-INF/classes. If the value for the parameter is not
  set i.e. it is <param-value></param-value>, then WebORB creates a temporary
  directory for every execution of the program.
  ==================================================================================== -->
  <persistentWebServicesStore>webservices</persistentWebServicesStore>


  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========       A B S T R A C T    M A P P I N G S          ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  If an abstract class or an interface is used an argument type in a method invocation,
  additional information is required about the concrete class that should be used to
  represent such a type. Abstract class mapping feature is designed to map non-abstract
  class to an interface or abstract class it implements or extends.
  To create an abstract type mapping, use <abstractClassMapping> element. The <className>
  subelement must define the name of an abstract class or an interface. The <mappedClassName>
  element must contain the name of the concrete class providing an implementation of the
  specified interface or the abstract class.
  ==================================================================================== -->
  <abstractClassMappings>
  <abstractClassMapping>
    <className>java.util.Collection</className>
    <mappedClassName>java.util.ArrayList</mappedClassName>
  </abstractClassMapping>

  <abstractClassMapping>
    <className>java.util.Map</className>
    <mappedClassName>java.util.HashMap</mappedClassName>
  </abstractClassMapping>

  <abstractClassMapping>
    <className>java.util.List</className>
    <mappedClassName>java.util.ArrayList</mappedClassName>
  </abstractClassMapping>

  <abstractClassMapping>
    <className>java.util.Set</className>
    <mappedClassName>java.util.HashSet</mappedClassName>
  </abstractClassMapping>

  <abstractClassMapping>
    <className>java.util.SortedSet</className>
    <mappedClassName>java.util.TreeSet</mappedClassName>
  </abstractClassMapping>

  <abstractClassMapping>
    <className>java.util.Dictionary</className>
    <mappedClassName>java.util.Hashtable</mappedClassName>
  </abstractClassMapping>

  <abstractClassMapping>
    <className>java.util.AbstractCollection</className>
    <mappedClassName>java.util.ArrayList</mappedClassName>
  </abstractClassMapping>

  <abstractClassMapping>
    <className>java.util.AbstractSequentialList</className>
    <mappedClassName>java.util.LinkedList</mappedClassName>
  </abstractClassMapping>

  <abstractClassMapping>
    <className>java.util.AbstractList</className>
    <mappedClassName>java.util.ArrayList</mappedClassName>
  </abstractClassMapping>

  <abstractClassMapping>
    <className>java.util.AbstractSet</className>
    <mappedClassName>java.util.HashSet</mappedClassName>
  </abstractClassMapping>

  <abstractClassMapping>
    <className>java.util.AbstractMap</className>
    <mappedClassName>java.util.HashMap</mappedClassName>
  </abstractClassMapping>

</abstractClassMappings>
  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========   C U S T O M   T Y P E   S E R I A L I Z E R S   ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  Type serializers are responsible for writing java objects to the AMF format. WebORB
  provides support for most common types as well as an ability to override or extend the
  default behavior.
  Use <customWriter> element to register new custom serializers. Each writer must be declared
  as a mapping between the type it is responsible for serializing <className> and the class
  name of the actual writer class <writerClassName>. Custom writer class must implement the
  weborb.writer.ITypeWriter interface and must have default no-argument constructor
  ==================================================================================== -->
  <!--
  <customWriters>
  <customWriter>
    <className>java.util.Vector</className>
    <writerClassName>weborb.writer.ListAsResultSetWriter</writerClassName>
  </customWriter>

  <customWriter>
    <className>weborb.v3types.BodyHolder</className>
    <writerClassName>weborb.v3types.BodyHolderWriter</writerClassName>
    </customWriter>
  </customWriters>
  -->
<customWriters>
  <!-- customWriter>
    <className>com.bizitglobal.tarjetafiel.commons.interfaces.Negocio</className>
    <writerClassName>com.bizitglobal.webapp.WriterNegocio</writerClassName>
 </customWriter-->
</customWriters>

  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ========   S E R I A L I Z A T I O N    I G N O R E   L I S T     ============= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  If a particular class should not be included in the serialization process because
  it is irrelevant for the client, add the class name to the list below in a <doNotSerialize>
  element. Class named listed in the <doNotSerialize> elements are added to the list of
  classes ignored during the serialization process.
  ==================================================================================== -->
  <doNotSerialize>org.apache.axis.description.TypeDesc</doNotSerialize>
  <doNotSerialize>sun.reflect.ReflectionFactory</doNotSerialize>
  <doNotSerialize>java.io.Writer</doNotSerialize>
  <doNotSerialize>java.io.Reader</doNotSerialize>
  <doNotSerialize>java.lang.Class</doNotSerialize>
  <doNotSerialize>java.lang.RuntimePermission</doNotSerialize>
  <doNotSerialize>java.io.InputStream</doNotSerialize>
  <doNotSerialize>java.io.OutputStream</doNotSerialize>
  <doNotSerialize>java.io.ObjectStreamField</doNotSerialize>
  <doNotSerialize>[Ljava.io.ObjectStreamField;</doNotSerialize>


  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========     S E R I A L I Z A T I O N    P R O P S        ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  This section contains various serialization related configuration settings. It is mostly
  a placeholder for future config items  
  ==================================================================================== -->
  <serialization>
    <serializePrivateFields>no</serializePrivateFields>
    <!-- if set to 'yes', instances of ICollection serialized as ArrayCollection 
         objects for Flex clients -->
    <legacyCollectionSerialization>yes</legacyCollectionSerialization>
  </serialization>



  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========     G E N E R A L    P R O P E R T I E S          ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  This section contains a generic property configuration mechanism. Every property contains
  a pair of "name" and "value" subelements. Property value can be obtained using
    ORBConfig.getORBConfig().getProperty( name ).
  The returned value is going to be a String (one value for a property with a name
  or ArrayList of strings (multiple value elements for the same property).
  ==================================================================================== -->
  <properties>
    <property>
      <name>excludeJarsFromConsole</name>
      <value>ant.jar</value>
      <value>ant-launcher.jar</value>
      <value>axis.jar</value>
      <value>axis-ant.jar</value>
      <value>axis-schema.jar</value>
      <value>commons-discovery.jar</value>
      <value>commons-logging.jar</value>
      <value>crimson.jar</value>
      <value>dom.jar</value>
      <value>ejb.jar</value>
      <value>hsqldb.jar</value>
      <value>tools.jar</value>
      <value>jasper-compiler.jar</value>
      <value>jasper-runtime.jar</value>
      <value>jaxrpc.jar</value>
      <value>jdom.jar</value>
      <value>jms.jar</value>
      <value>jnet.jar</value>
      <value>msbase.jar</value>
      <value>mssqlserver.jar</value>
      <value>msutil.jar</value>
      <value>mysql-connector-java-3.0.17-ga-bin.jar</value>
      <value>org.mortbay.jetty-jdk1.2.jar</value>
      <value>rowset.jar</value>
      <value>saaj.jar</value>
      <value>sax.jar</value>
      <value>serializer.jar</value>
      <value>servlet.jar</value>
      <value>sqljdbc.jar</value>
      <value>wsdl4j.jar</value>
      <value>xalan.jar</value>
      <value>xercesimpl.jar</value>
      <value>xsltc.jar</value>
      <value>spring-beans.jar</value>
      <value>spring-context.jar</value>
      <value>spring-core.jar</value>
      <value>spring-web.jar</value>
      <value>groovy-1.0.jar</value>
      <value>asm-2.2.jar</value>
      <value>zkm.jar</value>
      <value>postgresql-8.2-506.jdbc3.jar</value>
      <value>ojdbc14.jar</value>
      <value>xml-apis.jar</value>
    </property>

    <!-- any class in a packages with the name starting with any of the values listed below
    will be exluded from the service browser in the console -->
    <property>
      <name>excludePackagesFromConsoleStartsWith</name>
      <value>java</value>
      <value>com.sun</value>
      <value>org.apache</value>
      <value>org.globus</value>
      <value>org.soapinterop</value>
      <value>org.xmlsoap</value>
      <value>com.allaire</value>
      <value>com.bluedragon</value>
      <value>com.nary</value>
      <value>com.naryx</value>
      <value>org.xml</value>
      <value>schemaorg_apache_xmlbeans</value>
      <value>com.newatlanta</value>
      <value>org.alanwilliamson</value>
      <value>org.w3c</value>
      <value>electric</value>
      <value>com.ibm</value>
      <value>org.mortbay</value>
      <value>org.springframework</value>
      <value>com.microsoft</value>
      <value>sun.tools</value>
      <value>sun.security</value>
      <value>sun.rmi</value>
      <value>sun.applet</value>
      <value>org.hsqldb</value>
      <value>org.jdom</value>
      <value>com.zelix</value>
      <value>com.mysql</value>
      <value>weborb.activation</value>
      <value>weborb.calltrace</value>
      <value>weborb.config</value>
      <value>weborb.console</value>
      <value>weborb.data</value>
      <value>weborb.dispatch</value>
      <value>weborb.exceptions</value>
      <value>weborb.handler</value>
      <value>weborb.inspection</value>
      <value>weborb.management</value>
      <value>weborb.message</value>
      <value>weborb.messageserver</value>
      <value>weborb.protocols</value>
      <value>weborb.reader</value>
      <value>weborb.registry</value>
      <value>weborb.security</value>
      <value>weborb.tests</value>
      <value>weborb.types</value>
      <value>weborb.thirdparty</value>
      <value>weborb.util</value>
      <value>weborb.v3types</value>
      <value>weborb.messaging</value>
      <value>weborb.service</value>
      <value>weborb.writer</value>
      <value>benchmarks</value>
      <value>orbtest</value>
      <value>examples</value>
    </property>

    <!-- any class in the packages listed below will be exluded from the service browser in the console -->
    <property>
      <name>excludePackagesFromConsoleEquals</name>
      <value>weborb</value>
      <value>groovy</value>
      <value>org.codehaus.groovy</value>
    </property>
  </properties>

  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========                 S E C U R I T Y                   ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
  Security configuration consists of declaration of protected resources and
  access constraints. The resources are described by the <secure-resource>
  elements, access constraints are defined with the <access-constraint>
  element. Access constraints are not coupled to the resources, these are
  generic definitions of access limitations. One can define multiple constraints
  for the group of users/computers. A resource lists all the applicable
  constraints via the <constrain-name> elements.
  ==================================================================================== -->
  <security>
    <!--
    the <deploymentMode> element controls how the classes in the WebORB VM are exposed to the clients.
    The 'open system' deployment mode exposes ALL classes in the VM to Flash clients. Individual
    security restrictions (i.e. methods/classes/packages secured with <secure-resource> elements
    apply to all classes.
    The 'closed system' deployment model denies access to ALL classes except for the ones explicitly
    exposed with the <secure-resource> elements. To expose a method, class or package to all potential
    clients, create a 'grant' access restriction for IP address with mask *.*.*.* and then secure
    method/class/package with that access restriction.
    -->
    <deploymentMode>open</deploymentMode>

    <!--
    Authentication handler is responsible for authenticating user credentials passed along
    with an invocation. If specified, the handler is invoked every time when the credentials
    are passed along. Handler invocation takes place before any WebORB invocation handling
    takes place. If the credentials cannot be authenticated, WebORBAuthenticationException
    must be thrown to indicate the failure. Error message and error code from passed into the
    exception constructor are delivered to the client.
    Class specified in the authenticationHandler must implement the weborb.security.IAuthenticationHandler
    interface.
    -->
    <authenticationHandler>weborb.examples.security.LocalAclAuthenticationHandler</authenticationHandler>

    <!--
    Authorization handler is responsible for making a decision whether a request to access a resource
    should be allowed. Requests are initiated by the dispatchers, so out-of-the-box there will be
    inspection and invocation types of requests. Default (built-in) implementation of the authorization
    handler checks if any of the access constraints associated with the resource grant or deny access
    to the resource. An authorization handler must implement the weborb.security.IAuthorizationHandler
    interface and must have a default no-argument constructor.
    To override the global authorization handler, individual services may have their own service-level
    authorization handler. If one is specified, it overrides the global handler when the resource is
    accessed.
    -->
    <authorizationHandler>weborb.security.WebORBAuthorizationHandler</authorizationHandler>


    <!--
    Roles provider is a class implementing the weborb.security.IRolesProvider interface. An
    implementation must return a list of security roles the application can be secured with.
    Administrator can use the roles in the management console to restrict access to the code.
    -->
    <rolesProvider>weborb.security.WebORBRolesProvider</rolesProvider>


    <secure-resources>
      <secure-resource>
        <!--
        method - name of the method in the format of serviceid#methodname
        service - id of the service to secure (fully qualified class name, WSDL URL, JNDI lookup name)
        package name - name of the package in the form of com.acme.*
        weborb.ORBServlet - secure high level WebORB servlet
        weborb.dispatch.Inspector - secure all service inspectors
        weborb.dispatch.Invoker - secure all service invokers
        weborb.handler.JavaObjectHandler - secure just java inspector/invoker
        weborb.handler.EjbHandler - secure ejb inspector/invoker
        weborb.handler.webservices.AxisWebServiceHandler - secure Axis ws inspector/invoker
        weborb.handler.webservices.GLUEWebServiceHandler = secure GLUE ws inspector/invoker
        -->
        <resource></resource>

        <!--
        Specify the name of a constraint to secure the resource.
        Multiple constraint-name elements are allowed. Constraints must be
        validated by the authorization handler specified in the <authorizationHandler>
        element located under <security>.
        If the constraint-name element does not exist in the definition of a <secure-resource>
        element, authorization is handled by the authorization handler attached to the resource.
        Essentially, the <constraint-name> and <resourceAuthorizationHandler> elements form a union
        in the context of <secure-resource> element.
        -->
        <constraint-name></constraint-name>

        <!--
        Specifies resource-level authorization handler. Ths handler overrides global authorization
        handler defined in the <authorizationHandler> element above. If a resource has a custom
        authorization handler associated with it via <resourceAuthorizationHandler> element,
        all constraints are ignored and authorization is handled entirely by the handler.
        A handler must implement the weborb.security.IAuthorizationHandler interface and
        provide a default no-argument constructor
        -->
        <resourceAuthorizationHandler>weborb.security.UserCredentialsAuthorizationHandler</resourceAuthorizationHandler>

      </secure-resource>
      <secure-resource>
         <resource>weborb.tests.*</resource>
         <constraint-name>everyone</constraint-name>
      </secure-resource>
      <secure-resource>
         <resource>weborbHttpHandler</resource>
         <constraint-name>everyone</constraint-name>
      </secure-resource>
      <secure-resource>
         <resource>weborbInspector</resource>
         <constraint-name>everyone</constraint-name>
      </secure-resource>
      <secure-resource>
         <resource>weborbInvoker</resource>
         <constraint-name>everyone</constraint-name>
      </secure-resource>
      <secure-resource>
         <resource>weborbObjectHandler</resource>
         <constraint-name>everyone</constraint-name>
      </secure-resource>
      <secure-resource>
         <resource>weborbWebServiceHandler</resource>
         <constraint-name>everyone</constraint-name>
      </secure-resource>
      <!-- ***************** CONSOLE SERVICES ************************ -->
      <secure-resource>
         <resource>serverInfo</resource>
         <constraint-name>everyone</constraint-name>
         <!--<resourceAuthorizationHandler>weborb.security.UserCredentialsAuthorizationHandler</resourceAuthorizationHandler> -->
      </secure-resource>
      <secure-resource>
         <resource>Administration</resource>
         <constraint-name>everyone</constraint-name>
         <!--<resourceAuthorizationHandler>weborb.security.UserCredentialsAuthorizationHandler</resourceAuthorizationHandler> -->
      </secure-resource>
      <secure-resource>
         <resource>ORBSecurity</resource>
         <constraint-name>everyone</constraint-name>
         <!--<resourceAuthorizationHandler>weborb.security.UserCredentialsAuthorizationHandler</resourceAuthorizationHandler> -->
      </secure-resource>
      <secure-resource>
         <resource>SingleIPRestriction</resource>
         <constraint-name>everyone</constraint-name>
         <!-- <resourceAuthorizationHandler>weborb.security.UserCredentialsAuthorizationHandler</resourceAuthorizationHandler> -->
      </secure-resource>
      <secure-resource>
         <resource>IPRangeRestriction</resource>
         <constraint-name>everyone</constraint-name>
         <!-- <resourceAuthorizationHandler>weborb.security.UserCredentialsAuthorizationHandler</resourceAuthorizationHandler> -->
      </secure-resource>
      <secure-resource>
         <resource>HostNameRestriction</resource>
         <constraint-name>everyone</constraint-name>
         <!-- <resourceAuthorizationHandler>weborb.security.UserCredentialsAuthorizationHandler</resourceAuthorizationHandler> -->
      </secure-resource>
      <secure-resource>
         <resource>RoleNameRestriction</resource>
         <constraint-name>everyone</constraint-name>
         <!-- <resourceAuthorizationHandler>weborb.security.UserCredentialsAuthorizationHandler</resourceAuthorizationHandler> -->
      </secure-resource>
      <secure-resource>
         <resource>weborb.examples.AccountBalance</resource>
         <constraint-name>Constraint.Deny.weborb.examples.AccountBalance</constraint-name>
      </secure-resource>
      <secure-resource>
         <resource>weborb.examples.UserProfile</resource>
         <constraint-name>Constraint.Grant.weborb.examples.UserProfile</constraint-name>
         <constraint-name>Constraint.Deny.weborb.examples.UserProfile</constraint-name>
      </secure-resource>
      <secure-resource>
         <resource>weborb.HelloWorld</resource>
         <constraint-name>Constraint.Deny.weborb.HelloWorld</constraint-name>
      </secure-resource>
    </secure-resources>

    <access-constraints>
      <!--
      Define access constaints with the <access-constraint> elements.
      The action attribute is required. valid values are "grant" and "reject".
      A single access-constraint element may have a combination of the following
      constraints:
            - zero or more IP address
            - zero or more IP range
            - zero or more hostnames
            - zero or more user roles
            - zero or more java package name patterns
      A constraint element must have a name, so it can be reused for securing
      multiple resources
      -->
      <access-constraint action="grant">

        <!--
        Name of the access constraint
        -->
        <name>localhost constraint</name>
        <!--
        This can be either a single ip address (212.45.21.112)
        or a mask of ip addresses (212.45.*.*)
        Multiple IP elements allowed

        <IP></IP>
        -->

        <!--
        Range of ip addresses. Use either specific addresses or masks.
        Multiple IPrange elements allowed

        <IPrange>
          <subnet-address></subnet-address>
          <subnet-mask></subnet-mask>
        </IPrange>
        -->

        <!--
        this can be either a single hostname (weborb.com),
        or a pattern of host names (*.weborb.com)
        Multiple hostname elements allowed
        -->
        <hostname>localhost</hostname>

        <!--
        Define role-based access constrains using the role element. The roles must be
        defined using in acl.xml file. Multiple <role> elements allowed

        <role></role>
        -->
      </access-constraint>
      <access-constraint action="grant">
        <name>everyone</name>
        <IP>*.*.*.*</IP>
      </access-constraint>
      <access-constraint action="reject">
        <name>Constraint.Deny.weborb.examples.AccountBalance</name>
        <IP>*.*.*.*</IP>
      </access-constraint>
      <access-constraint action="grant">
        <name>Constraint.Grant.weborb.examples.UserProfile</name>
        <role>databaseuser</role>
      </access-constraint>
      <access-constraint action="reject">
        <name>Constraint.Deny.weborb.examples.UserProfile</name>
        <IP>*.*.*.*</IP>
      </access-constraint>
      <access-constraint action="reject">
        <name>Constraint.Deny.weborb.HelloWorld</name>
        <IP>*.*.*.*</IP>
      </access-constraint>
    </access-constraints>
  </security>

  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========      S E R V I C E   F A C T O R I E S            ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
   Service object factories are responsible for creating new instances of
   objects on which the invocations will take place. By default WebORB
   uses default no-arg constructor to create new instances. Using service
   object factory will override that mechanism.
   ==================================================================================== -->
  <serviceFactories>
    <!--
     Each service object factory must be declared using the <serviceFactory>
     element. Each element must contain fully qualified class name for
     the actual service object factory class and fully qualified classname
     for the class (interface) the factory is responsible for creating.
    -->
    <serviceFactory>
      <!-- fully qualified class name of the service object.
      the class must implement weborb.util.IServiceObjectFactory -->
      <serviceFactoryClassName></serviceFactoryClassName>
      <!-- fully qualified class name the service object
      factory is responsible for constructing -->
      <className></className>
    </serviceFactory>
  </serviceFactories>



  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========      A R G U M E N T   F A C T O R I E S          ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
   Argument object factories are responsible for creating new instances of
   method arguments which will be passed into method invocations. By default WebORB
   uses argument adaptation logic where Flash ActionScript data types are converted
   into the argument types of the invoked method. Using argument object factories
   overrides the default adaptation logic mechanism.
   ==================================================================================== -->
  <argumentFactories>
    <!--
     Each argument object factory must be declared using the <argumentFactory>
     element. Each element must contain fully qualified class name for
     the actual argument object factory class and fully qualified classname
     for the class (interface) the factory is responsible for creating.
    -->
    <argumentFactory>
      <!-- fully qualified class name of the service object.
      the class must implement weborb.util.IArgumentObjectFactory -->
      <argumentFactoryClassName>weborb.management.security.SecurityRestrictionArgFactory</argumentFactoryClassName>

      <!-- fully qualified class name the service object
      factory is responsible for constructing -->
      <className>weborb.security.IRestriction</className>
    </argumentFactory>

    <argumentFactory>
      <argumentFactoryClassName>weborb.management.configuration.logging.LoggingPolicyArgFactory</argumentFactoryClassName>
      <className>weborb.util.log.policies.ILoggingPolicy</className>
    </argumentFactory>

    <argumentFactory>
      <argumentFactoryClassName>weborb.v3types.BodyHolderFactory</argumentFactoryClassName>
      <className>weborb.v3types.BodyHolder</className>
    </argumentFactory>

  </argumentFactories>





  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========                 D A T A S E T S                   ================= -->
  <!-- ===========                                                   ================= -->
  <!-- ===============================================================================
   Currently there is only one configuration property related to the data set serialization.
   The property is <defaultPageSize> and it controls how many records from data tables
   are returned with the first request.
  ==================================================================================== -->
   <datasets>
      <defaultPageSize>10</defaultPageSize>
   </datasets>

  <!-- =============================================================================== -->
  <!-- ===========                                                   ================= -->
  <!-- ===========          M E S S A G E   S E R V E R              ================= -->
  <!-- ===========                                                   ================= -->
  <!-- =============================================================================== -->
  <messageServer>

    <handlerChains>
      <!--
      <handlerChain>
        <factoryClass></factoryClass>
        <preExecutionChain>
          <handlerClass></handlerClass>
          <handlerClass></handlerClass>
        </preExecutionChain>
        <postExecutionChain>
          <handlerClass></handlerClass>
          <handlerClass></handlerClass>
        </postExecutionChain>
      </handlerChain>
      -->

      <handlerChain>
        <factoryClass>weborb.messageserver.message.DefaultXMLMessageFactory</factoryClass>
        <postExecutionChain>
          <handlerClass>weborb.messageserver.message.handler.MessageDeliveryHandler</handlerClass>
        </postExecutionChain>
      </handlerChain>

      <handlerChain>
        <factoryClass>weborb.messageserver.message.DefaultMessageFactory</factoryClass>
        <postExecutionChain>
          <handlerClass>weborb.messageserver.message.handler.MessageDeliveryHandler</handlerClass>
        </postExecutionChain>
      </handlerChain>

    </handlerChains>

    <messageFactories>
      <serverDomain>
        <serverName>default</serverName>
        <port>9000</port>
        <autoStart>false</autoStart>
        <defaultXMLMessageFactory>weborb.messageserver.message.DefaultXMLMessageFactory</defaultXMLMessageFactory>

        <messageFactory>
          <messageRootElement>join</messageRootElement>
          <factoryClassName>weborb.messageserver.message.system.JoinCommandMessageFactory</factoryClassName>
        </messageFactory>

        <messageFactory>
          <messageRootElement>deliverTo</messageRootElement>
          <factoryClassName>weborb.messageserver.message.system.DeliverToCommandMessageFactory</factoryClassName>
        </messageFactory>

        <messageFactory>
          <messageRootElement>getSubscribers</messageRootElement>
          <factoryClassName>weborb.messageserver.message.system.GetSubscribersMessageFactory</factoryClassName>
        </messageFactory>

        <messageFactory>
          <messageRootElement>changeLogicalName</messageRootElement>
          <factoryClassName>weborb.messageserver.message.system.ChangeLogicalNameCommandMessageFactory</factoryClassName>
        </messageFactory>

      </serverDomain>
    </messageFactories>
  </messageServer>
</config>