package com.bizitglobal.webapp.faces.beans.contabilidad.informes;

import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import javax.faces.event.ActionEvent;
import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;

import com.bizitglobal.webapp.faces.beans.BaseBean;
import com.bizitglobal.webapp.faces.util.Error;
import com.bizitglobal.webapp.faces.util.Session;
import com.bizitglobal.webapp.faces.util.Validador;


public class InformesBean extends BaseBean {
	private static final Logger log = Logger.getLogger(InformesBean.class);
	private Date fechaDesde;
	private Date fechaHasta;

	// Propiedad para ejecutar el popup del reporte.
	private String popupReport = new String("");


	public InformesBean() {
		super();
		fechaDesde = null;
		fechaHasta = null;
	}


	public Date getFechaDesde() {
		return fechaDesde;
	}


	public void setFechaDesde(Date fechaDesde) {
		this.fechaDesde = fechaDesde;
	}


	public Date getFechaHasta() {
		return fechaHasta;
	}


	public void setFechaHasta(Date fechaHasta) {
		this.fechaHasta = fechaHasta;
	}


	public String getPopupReport() {
		return popupReport;
	}


	public void setPopupReport(String popupReport) {
		this.popupReport = popupReport;
	}


	public void borrar() {

		Calendar fecha = Calendar.getInstance();
		fechaHasta = fecha.getTime();
		fecha.add(Calendar.DAY_OF_MONTH, -1);
		// fecha.add(Calendar.MONTH, -12);
		fechaDesde = fecha.getTime();

		popupReport = new String("");
	}


	/**
	 * @id: 7598 Method: borrarCarteraCliente Description:
	 * @return
	 */
	public void borrarCarteraCliente() {

		Calendar fecha = Calendar.getInstance();
		fechaDesde = fecha.getTime();
		// fecha.add(Calendar.DAY_OF_MONTH, -1);
		popupReport = new String("");
	}


	public void borrarComercio() {

		Calendar fecha = Calendar.getInstance();
		fechaHasta = fecha.getTime();
		// fecha.add(Calendar.DAY_OF_MONTH, -1);
		fecha.add(Calendar.MONTH, -6);
		fechaDesde = fecha.getTime();

		popupReport = new String("");
	}


	/**
	 * @id: 5839 Method: borrarConsumoAdelanto Description: Establece las fechas de busquedad de los consumos y adelantos en efectivo
	 */
	public void borrarConsumoAdelanto() {

		Calendar fecha = Calendar.getInstance();
		fechaHasta = fecha.getTime();
		// fecha.add(Calendar.DAY_OF_MONTH, -1);
		fecha.add(Calendar.MONTH, -5);
		fecha.set(Calendar.DAY_OF_MONTH, 1);
		fechaDesde = fecha.getTime();
		popupReport = new String("");
	}


	/**
	 * @id: 5770 Method: borrarLineaCredito Description: Establece las fechas de busquedad de Linea de Credito
	 */
	public void borrarLineaCredito() {
		Calendar fecha = Calendar.getInstance();
		fechaHasta = fecha.getTime();
		fecha.add(Calendar.DAY_OF_MONTH, -1);
		fechaDesde = fecha.getTime();
		popupReport = new String("");
	}


	public void borrarConceptoMensual() {

		Calendar fecha = Calendar.getInstance();
		fechaHasta = fecha.getTime();
		// fecha.add(Calendar.DAY_OF_MONTH, -1);
		fecha.add(Calendar.MONTH, -1);
		fechaDesde = fecha.getTime();

		popupReport = new String("");
	}


	public String inicializar() {
		borrar();

		tituloLargo = "INFORMES";
		tituloCorto = "Resumen Liquidaciónes de Clientes";

		return "resumenLiquidacionesClientes";
	}


	public String inicializarComercio() {
		// borrar();
		borrarComercio();

		tituloLargo = "INFORMES";
		tituloCorto = "Resumen Liquidaciónes de Comercios";

		return "resumenLiquidacionesComercios";
	}


	public String inicializarConceptos() {
		borrar();

		tituloLargo = "INFORMES";
		tituloCorto = "General Conceptos";

		return "generalConceptos";
	}


	public String inicializarPagosComercios() {
		borrar();

		tituloLargo = "INFORMES";
		tituloCorto = "Listar Pagos Comercios";

		return "listarPagosComercios";
	}


	public String inicializarConsumoComercio() {
		// borrar();
		borrarComercio();

		tituloLargo = "INFORMES";
		tituloCorto = "Revisar Consumos Comercios";

		return "revisarConsumosComercios";
	}


	/**
	 * @id: 7598 Method: inicializarCarteraCliente Description:
	 * @return
	 */
	public String inicializarCarteraCliente() {
		// borrar();
		borrarCarteraCliente();

		tituloLargo = "INFORMES";
		tituloCorto = "Generar Cartera para OCA";

		return "listarCarteraClientesOca";
	}


	public String inicializarConceptoMensualCuota() {
		borrarConceptoMensual();
		// borrarComercio();

		tituloLargo = "INFORMES";
		tituloCorto = "Concepto Cliente entre Meses";

		return "detalleConceptoMensualCuota";
	}


	/**
	 * @id: 5770 Method: inicializarListadoLineaCredito Description: Inicializa Linea Credito
	 * @return
	 */
	public String inicializarListadoLineaCredito() {
		borrarLineaCredito();
		// borrarComercio();

		tituloLargo = "INFORMES";
		tituloCorto = "Lineas de Creditos entre Meses";

		return "listarLineasCreditos";
	}


	/**
	 * @id: 5839 Method: inicializarConsumoAdelanto Description: Inicializa la Busquedad del Consumo y Adelanto en Efectivo
	 * @return
	 */
	public String inicializarConsumoAdelanto() {
		borrarConsumoAdelanto();
		// borrarComercio();

		tituloLargo = "INFORMES";
		tituloCorto = "Consumo y Adelanto en Efectivo";

		return "listarConsumoAdelantoEfectivo";
	}


	public boolean validarFecha() {
		error.borrar();

		if (Validador.esNulo(getFechaDesde()) || getFechaDesde().equals(new Date(0))
				|| Validador.esNulo(getFechaHasta()) || getFechaHasta().equals(new Date(0))) {
			error.agregar(Error.COMPROBANTE_FECHA_REQUERIDA);
		} else {
			if (getFechaDesde().after(getFechaHasta())) {
				error.agregar("La fecha desde no puede ser mayor a la fecha hasta");
			}
		}
		return (error.cantidad() == 0) ? true : false;
	}


	/**
	 * @id: 7598 Method: validarFechaCartera Description:
	 * @return
	 */
	public boolean validarFechaCartera() {
		error.borrar();

		if (Validador.esNulo(getFechaDesde()) || getFechaDesde().equals(new Date(0))) {
			error.agregar(Error.COMPROBANTE_FECHA_REQUERIDA);
		}
		return (error.cantidad() == 0) ? true : false;
	}


	public boolean validar() {
		error.borrar();

		// if (Validador.esNulo(proveedor)) {
		// error.agregar(Error.PROVEEDOR_CODIGO_INVALIDO);
		// }
		//
		// if(Validador.esNulo(getFechaDesde()) || getFechaDesde().equals(new Date(0)) || Validador.esNulo(getFechaHasta()) ||
		// getFechaHasta().equals(new Date(0))){
		// error.agregar(Error.COMPROBANTE_FECHA_REQUERIDA);
		// }else {
		// if (getFechaDesde().after(getFechaHasta())){
		// error.agregar(Error.REPORTE_FECHA_MENOR);
		// }
		// }
		//
		// if(error.cantidad()!=0){
		// return false;
		// }else{
		// long idOperador = Session.getOperador().getCodigo().longValue();
		// long idProveedor = proveedor.getIdProveedor().longValue();
		// if (proveedoresService.getProveedorReporteDao().InicializarReporteCompSaldo(idOperador, idProveedor, fechaDesde, fechaHasta)){
		// return true;
		// }else{
		return false;
		// }
		// }
	}


	public void generarResumenLiquidacionesCliente(ActionEvent event) {
		popupReport = new String("");
		if (validarFecha()) {
			HttpServletRequest request = Session.getRequest();
			Format dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			String p1 = "";
			String p2 = "";
			String p3 = "";
			p1 = "?fecha_desde=" + dateFormat.format(fechaDesde);
			p2 = "&URLImagen=" + Session.getHomePath() + "/img/fiel/logo_fiel.jpg";
			p3 = "&fecha_hasta=" + dateFormat.format(fechaHasta);

			String page = request.getContextPath() + "/report/ResumenLiquidacionesClientes.jrxml";

			popupReport = "popup('" + page + p1 + p2 + p3 + "',1000,600)";
			log.info(popupReport);
		}

	}


	public void generarResumenLiquidacionesComercios(ActionEvent event) {
		popupReport = new String("");
		if (validarFecha()) {
			HttpServletRequest request = Session.getRequest();

			// reporte de cartas prejudiciales
			// Format dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			// String p1 ="";
			// String p2 ="";
			// String p3 ="";
			// String p4 ="";
			// String p5 ="";
			// p1 = "?cliente="+"LEIVA, GUSTAVO FABIAN";
			// p2 = "&domicilio="+"PAULA ALBARRACINY FORMOSA s/n - Mz. D Mb. 12 Dpto. C BÂ?. LUZ Y FUERZA III";
			// p3 = "&localidad="+"Loc: - Partido: CHIMBAS Prov: San Juan C.P: 5413";
			// p4 = "&numero_cuenta="+new Long("33763");
			// p5 = "&fecha_hoy="+"27/12/2010";

			// String page = request.getContextPath()+"/report/Aviso_Carta_Prejudicial.jrxml";

			// fin de reporte de cartas prejudiciales

			// reporte consumos de comercios entre fechas llamando a un SP
			// Format dateFormat = new SimpleDateFormat("yyyyMM");
			// String pFechaDesde = dateFormat.format(fechaDesde);
			// String pFechaHasta = dateFormat.format(fechaHasta);
			// Long pIdOperador = Session.getOperador().getCodigo();
			//
			// transaccionesService.getGeneracionClientesOcaService().
			// generarConsumosComerciosEntrefechas(pIdOperador,pFechaDesde,pFechaHasta);
			//
			//
			//
			// String p1 = "?id_operador="+Session.getOperador().getCodigo();
			// // String p4 = "&id_operador="+Session.getOperador().getCodigo();
			// // String p5 = "&URLImagen="+Session.getHomePath()+"/img/fiel/logo_fiel.jpg";
			// String p2 = "&AExcel=excel";

			Format dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			String p1 = "";
			String p2 = "";
			String p3 = "";
			p1 = "?fecha_desde=" + dateFormat.format(fechaDesde);
			p2 = "&URLImagen=" + Session.getHomePath() + "/img/fiel/logo_fiel.jpg";
			p3 = "&fecha_hasta=" + dateFormat.format(fechaHasta);

			String page = request.getContextPath() + "/report/ResumenLiquidacionesComercios.jrxml";
			popupReport = "popup('" + page + p1 + p2 + p3 + "',1000,600)";

			// reporte de columnas dinamicas
			// Format dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			// String p1 = "?fechadesde="+dateFormat.format(fechaDesde);
			// String p2 = "&fechahasta="+dateFormat.format(fechaHasta);
			// // String p4 = "&id_operador="+Session.getOperador().getCodigo();
			// // String p5 = "&URLImagen="+Session.getHomePath()+"/img/fiel/logo_fiel.jpg";
			// String p3 = "&AExcel=excel";

			// String page = request.getContextPath()+"/report/Aviso_Carta_Prejudicial.jrxml";

			// popupReport = "popup('"+page+p1+p2+p3+p4+p5+"',1000,600)";
			log.info(popupReport);
		}

	}


	public void revisarConsumosComercios(ActionEvent event) {
		popupReport = new String("");
		if (validarFecha()) {
			HttpServletRequest request = Session.getRequest();

			// reporte consumos de comercios entre fechas llamando a un SP
			Format dateFormat = new SimpleDateFormat("yyyyMM");

			String pFechaDesde = dateFormat.format(fechaDesde);
			String pFechaHasta = dateFormat.format(fechaHasta);
			Long pIdOperador = Session.getOperador().getCodigo();

			transaccionesService.getGeneracionClientesOcaService().
					generarConsumosComerciosEntrefechas(pIdOperador, pFechaDesde, pFechaHasta);

			String p1 = "?id_operador=" + Session.getOperador().getCodigo();
			// String p4 = "&id_operador="+Session.getOperador().getCodigo();
			// String p5 = "&URLImagen="+Session.getHomePath()+"/img/fiel/logo_fiel.jpg";
			String p2 = "&AExcel=excel";

			String page = request.getContextPath() + "/report/ComercioListaPrecioYConsumoSp.jrxml";
			popupReport = "popup('" + page + p1 + p2 + "',1000,600)";

			log.info(popupReport);
		}

	}


	/**
	 * @id: 7598 Method: generarCarteraOca Description:
	 * @return
	 */
	public void generarCarteraOca(ActionEvent event) {
		popupReport = new String("");
		if (validarFechaCartera()) {
			HttpServletRequest request = Session.getRequest();

			// reporte consumos de comercios entre fechas llamando a un SP
			Format dateFormat = new SimpleDateFormat("yyyyMM");

			String pFechaDesde = dateFormat.format(fechaDesde);
			Long pIdOperador = Session.getOperador().getCodigo();

			transaccionesService.getGeneracionClientesOcaService().
					generarClientesOca(pIdOperador);

			String p1 = "?operador=" + Session.getOperador().getCodigo();
			String p2 = "&aniomes=" + pFechaDesde;
			// String p5 = "&URLImagen="+Session.getHomePath()+"/img/fiel/logo_fiel.jpg";
			String p3 = "&AExcel=excel";

			String page = request.getContextPath() + "/report/GenerarBaseClientesParaOca.jrxml";
			popupReport = "popup('" + page + p1 + p2 + p3 + "',1000,600)";

			log.info(popupReport);
		}

	}


	public void detalleConceptoMensualCuota(ActionEvent event) {
		popupReport = new String("");
		if (validarFecha()) {
			HttpServletRequest request = Session.getRequest();

			Format dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			;
			String p1 = "";
			String p2 = "";
			String p3 = "";
			p1 = "?fecha_desde=" + dateFormat.format(fechaDesde);
			p2 = "&fecha_hasta=" + dateFormat.format(fechaHasta);
			p3 = "&AExcel=excel";

			String page = request.getContextPath() + "/report/ConceptosClienteMesesCuotas.jrxml";
			popupReport = "popup('" + page + p1 + p2 + p3 + "',1000,600)";

			log.info(popupReport);
		}

	}


	/**
	 * @id: 5770 Method: detalleLineaCredito Description: Genera el reporte de linea de credito
	 * @param event
	 */
	public void detalleLineaCredito(ActionEvent event) {
		popupReport = new String("");
		if (validarFecha()) {
			HttpServletRequest request = Session.getRequest();
			Format dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			;
			String p1 = "";
			String p2 = "";
			String p3 = "";
			p1 = "?fecha_desde=" + dateFormat.format(fechaDesde);
			p2 = "&fecha_hasta=" + dateFormat.format(fechaHasta);
			p3 = "&AExcel=excel";
			String page = request.getContextPath() + "/report/Linea_de_credito_cliente.jrxml";
			popupReport = "popup('" + page + p1 + p2 + p3 + "',1000,600)";

			log.info(popupReport);
		}

	}


	/**
	 * @id: 5839 Method: detalleConsumoAdelantoEfectivo Description: Genera el reporte de consumo y adelanto en efectivo
	 * @param event
	 */
	public void detalleConsumoAdelantoEfectivo(ActionEvent event) {
		popupReport = new String("");
		if (validarFecha()) {
			HttpServletRequest request = Session.getRequest();
			Format dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			;
			String p1 = "";
			String p2 = "";
			String p3 = "";
			p1 = "?fecha_desde=" + dateFormat.format(fechaDesde);
			p2 = "&fecha_hasta=" + dateFormat.format(fechaHasta);
			p3 = "&AExcel=excel";
			String page = request.getContextPath() + "/report/ConsumosAdelantosClientesPorMes.jrxml";
			popupReport = "popup('" + page + p1 + p2 + p3 + "',1000,600)";

			log.info(popupReport);
		}

	}


	public void generarConceptos(ActionEvent event) {
		popupReport = new String("");
		if (validarFecha()) {
			HttpServletRequest request = Session.getRequest();
			Format dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			String p1 = "";
			String p2 = "";
			String p3 = "";
			p1 = "?fecha_desde=" + dateFormat.format(fechaDesde);
			p2 = "&URLImagen=" + Session.getHomePath() + "/img/fiel/logo_fiel.jpg";
			p3 = "&fecha_hasta=" + dateFormat.format(fechaHasta);

			String page = request.getContextPath() + "/report/GeneralConceptos.jrxml";

			popupReport = "popup('" + page + p1 + p2 + p3 + "',1000,600)";
			log.info(popupReport);
		}

	}


	public void listarPagosComercios(ActionEvent event) {
		popupReport = new String("");
		// if(validarFecha()){
		HttpServletRequest request = Session.getRequest();
		Format dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		String p1 = "";
		String p2 = "";
		// String p3 ="";
		p1 = "?fecha_desde=" + dateFormat.format(fechaDesde);
		// p2 = "&URLImagen="+Session.getHomePath()+"/img/fiel/logo_fiel.jpg";
		/* @I4811 */// p2 = "&fecha_hasta="+dateFormat.format(fechaHasta);

		String page = request.getContextPath() + "/report/ValoresLiquidacionComercios.jrxml";

		popupReport = "popup('" + page + p1 + "',1000,600)";
		log.info(popupReport);
		// }

	}


	public String generarAExcel(ActionEvent event) {
		// HttpServletRequest request = Session.getRequest();
		// proveedor = null;
		// error.borrar();
		// popupReport = new String("");
		//
		// try {
		// proveedor = proveedoresService.getProveedorService().leerProveedor(new Long(idProveedor));
		// } catch (ProveedorException e) {
		// e.printStackTrace();
		// }
		//
		// if(validar()) {
		// Format dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		// String p1 = "?id_proveedor="+idProveedor;
		// String p2 = "&fecha_desde="+dateFormat.format(fechaDesde);
		// String p3 = "&fecha_hasta="+dateFormat.format(fechaHasta);
		// String p4 = "&id_operador="+Session.getOperador().getCodigo();
		// String p5 = "&URLImagen="+Session.getHomePath()+"/img/fiel/logo_fiel.jpg";
		// String p6 = "&AExcel=excel";
		// String page = request.getContextPath()+"/report/ProveedoresCompSaldoExcel.jrxml";
		//
		// popupReport = "popup('"+page+p1+p2+p3+p4+p5+p6+"',1000,600)";
		//
		// log.info(popupReport);
		// }
		return null;
	}

}
